{"name":"Mycila JMX","tagline":"Easily expose your classes in JMX through annotations","body":"**Table of Contents**\r\n\r\n- [Mycila JMX](#mycila-jmx)\r\n\t- [Maven Repository](#maven-repository)\r\n\t- [Documentation](#documentation)\r\n\t\t- [1. Annotations](#1-annotations)\r\n\t\t- [2. Dynamic naming](#2-dynamic-naming)\r\n\t\t- [3. How to use](#3-how-to-use)\r\n\t\t- [4. JmxMetadataAssembler](#4-jmxmetadataassembler)\r\n\t\t- [5. Mycile Guice Integration](#5-mycile-guice-integration)\r\n\t\t- [6. Tools](#6-tools)\r\n\r\n# Mycila JMX #\r\n\r\nThis small project enables to export your classes easily through JMX.\r\n\r\n__Issues:__ https://github.com/mycila/jmx/issues\r\n\r\n<img width=\"100px\" src=\"http://www.sonatype.com/system/images/W1siZiIsIjIwMTMvMDQvMTIvMTEvNDAvMzcvMTgzL05leHVzX0ZlYXR1cmVfTWF0cml4X29zZ2lfbG9nby5wbmciXV0/Nexus-Feature-Matrix-osgi-logo.png\" title=\"OSGI Compliant\"></img>\r\n[![Build Status](https://travis-ci.org/mycila/jmx.png?branch=master)](https://travis-ci.org/mycila/jmx)\r\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/mycila/jmx/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\r\n[![githalytics.com alpha](https://cruel-carlota.pagodabox.com/85294c815bb3ce46bd79f4cf8d9bb341 \"githalytics.com\")](http://githalytics.com/mycila/jmx)\r\n\r\n## Maven Repository ##\r\n\r\n - __Releases__ \r\n\r\nAvailable in Maven Central Repository: http://repo1.maven.org/maven2/com/mycila/jmx/\r\n\r\n - __Snapshots__\r\n \r\nAvailable in OSS Repository:  https://oss.sonatype.org/content/repositories/snapshots/com/mycila/jmx/\r\n\r\n__Maven dependency__\r\n\r\n    <dependency>\r\n        <groupId>com.mycila</groupId>\r\n        <artifactId>mycila-jmx</artifactId>\r\n        <version>X.Y.ga</version>\r\n    </dependency>\r\n\r\n## Documentation ##\r\n\r\n### 1. Annotations ###\r\n\r\n - `@JmxBean`: mark a class to be exported to JMX and set its name \r\n - `@JmxMethod`: export a method\r\n - `@JmxProperty`: export a bean property (getter/setter) and specify its access writes \r\n - `@JmxField`: export a field to JMX and specify its access writes\r\n - `@JmxMetric`: export a JMX metric, its name and unit (counter or gauge)\r\n \r\n### 2. Dynamic naming ###\r\n\r\nA bean can implement the interface `JmxSelfNaming` to return the its `ObjectName`\r\n\r\n### 3. How to use ###\r\n\r\nSupposing you have annotated your class like this\r\n\r\n    @JmxBean(\"com.company:type=MyService,name=main\")\r\n    public final class MyService {\r\n    \r\n        private String name;\r\n    \r\n        @JmxField\r\n        private int internalField = 10;\r\n    \r\n        @JmxProperty\r\n        public String getName() { return name; }\r\n    \r\n        public void setName(String name) { this.name = name; }\r\n    \r\n        @JmxMethod(parameters = {@JmxParam(value = \"number\", description = \"put a big number please !\")})\r\n        void increment(int n) {\r\n            internalField += n;\r\n        }\r\n    }\r\n\r\nThen create an exporter which will be able to export your beans:\r\n\r\n    MycilaJmxExporter exporter = new MycilaJmxExporter();\r\n    exporter.setMetadataAssembler(getMetadataAssembler());\r\n    exporter.setEnsureUnique(true);\r\n\r\nAnd export your service:\r\n\r\n    exporter.register(myServiceInstance)\r\n\r\n\r\n### 4. JmxMetadataAssembler ###\r\n\r\n`JmxMetadataAssembler` are implementations which describes the exportable members of a class and how to export them. Several implementation exist:\r\n\r\n - `PublicMetadataAssembler`: when beans are registered, only public methods, properties and fields are exported\r\n - `AnnotationMetadataAssembler`: when beans are registered, only annotated methods, properties and fields are exported\r\n- `CustomMetadataAssembler`: you can specify which members are exported. This class can be useful if you only need to export just some members and if you do not have access to the source code of the class to export\r\n\r\n__Example__\r\n\r\n    CustomMetadataAssembler assembler = new CustomMetadataAssembler()\r\n        .addAttribute(MyClass.class, \"myRWField\")\r\n        .addProperty(MyClass.class, \"myProperty\")\r\n        .addOperation(MyClass.class, \"goMethod\");\r\n\r\nYou will be able to find other examples in the Unit Tests \r\n\r\n### 5. Mycile Guice Integration ###\r\n\r\nWhen using the service discovery feature of [Mycile Guice] (http://mycila.github.io/guice/) (Google Guice extensions) JMX annoteated beans are automatically discovered and exported\r\n\r\n\r\n### 6. Tools ###\r\n\r\n - [VisualVM] (http://visualvm.java.net/): Connects to a Java process and manage exported JMX classes\r\n - [MX4J] (http://mx4j.sourceforge.net/): Web interface yo manage JMX beans\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}